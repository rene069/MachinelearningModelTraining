@page "/"
@using __150SamplesFinal_ConsoleApp1;


<div class="mb-3">
    <label for="imagePath" class="form-label">Billede:</label>
    <InputFile  Id="imagePath" accept=".jpg,.jpeg,.png" OnChange="@HandleFileSelected" class="form-control" />
    <button @onclick="Predict">Predict</button>
</div>
@if (imagePath != null)
{
    <div class="mb-3">
        <img style="height: 400px; width: 400px;" src="@imagePath" />
    </div>
    <div>
        @foreach (var item in Scores)
        {
           <p>@item</p>
        }
    </div>
}

@code {
    //private InputFile? inputFile;
    private IBrowserFile selectedFile;
    private string imagePath;
    private string? bytes;
    long maxAllowedSize = 2000000000; //2GB

    public List<string> Scores { get; set; } = new();

    private async void HandleFileSelected(InputFileChangeEventArgs e)
    {

        try
        {
            string[] allowedExtensions = new[] { ".jpg", ".jpeg", ".png" };
            if (!allowedExtensions.Contains(Path.GetExtension(e.File.Name).ToLowerInvariant()))
            {
                // Show an error message
                toastService.ShowError("Invalid file type.");
                imagePath = "";
            }
            else
            {
                var format = "image/png";
                selectedFile = e.File;
                using var ms = new MemoryStream();
                await selectedFile.OpenReadStream(maxAllowedSize).CopyToAsync(ms);
                var filebytes = ms.ToArray();
                bytes = Convert.ToBase64String(filebytes);
                imagePath = $"data:{format};base64,{Convert.ToBase64String(ms.ToArray())}";
            }
            StateHasChanged();
        }
        catch (Exception)
        {
            toastService.ShowError("Something went Wrong");
        }
    }

    private async void Predict()
    {
        Scores = new();
        var imageBytes = Convert.FromBase64String(bytes);
        _150SamplesFinal.ModelInput sampleData = new()
            {
                ImageSource = imageBytes
            };
        var sortedScores = _150SamplesFinal.PredictAllLabels(sampleData);

        foreach (var item in sortedScores)
        {
            Scores.Add($"Name: {item.Key}\t Score: {item.Value}");
        }
    }

}