
using ModelTraining;
using System.IO;

class program
{
    static void Main()
    {
        // This file was auto-generated by ML.NET Model Builder. 
        string folderPath = @"D:\Skrivebord\Machinelearning data\Discarded";
        List<string> imageFilePaths = GetImageFilePaths(folderPath);

        // Create single instance of sample data from first line of dataset for model input

        //Console.WriteLine($"{"Class",-40}{"Score",-20}");
        //Console.WriteLine($"{"-----",-40}{"-----",-20}");
        int test = 0;
        foreach (string imagePath in imageFilePaths)
        {
            var imageBytes = File.ReadAllBytes(imagePath);
            _100samplesbettermodel.ModelInput sampleData = new _100samplesbettermodel.ModelInput()
            {
                ImageSource = imageBytes,
            };

            // Make a single prediction on the sample data and print results.
            var sortedScoresWithLabel = _100samplesbettermodel.Predict(sampleData);
            string filepath = Path.Combine(@"D:\Skrivebord\Machinelearning data\Ny mappe", sortedScoresWithLabel.PredictedLabel + test.ToString() + ".png");
            Console.WriteLine(imagePath);

            //if (!Directory.Exists(filepath))
            //{
            //    Directory.CreateDirectory(filepath);
            //}
            File.Copy(imagePath, filepath);
            test++;
        }

        //foreach (var score in sortedScoresWithLabel)
        //{
        //    Console.WriteLine($"{score.Key,-40}{score.Value,-20}");

        //}
    }

    static List<string> GetImageFilePaths(string folderPath)
    {
        List<string> imagePaths = new List<string>();

        if (Directory.Exists(folderPath))
        {
            string[] imageExtensions = { ".jpg", ".jpeg", ".png", ".gif", ".bmp" }; // Add more if needed

            foreach (string file in Directory.GetFiles(folderPath))
            {
                if (IsImageFile(file, imageExtensions))
                {
                    imagePaths.Add(file);
                }
            }
        }
        else
        {
            Console.WriteLine("The specified folder does not exist.");
        }

        return imagePaths;
    }

    static bool IsImageFile(string filePath, string[] imageExtensions)
    {
        string extension = Path.GetExtension(filePath);
        if (string.IsNullOrEmpty(extension))
        {
            return false;
        }

        string lowerCaseExtension = extension.ToLower();
        return Array.Exists(imageExtensions, ext => ext == lowerCaseExtension);
    }

}
